ADALIB!=	gnatls -v | grep adalib | awk '{print $$1}'
MYRPATH=	${ADALIB}:${PREFIX}/lib/xmlada/relocatable

STATIC_FLAGS=	-gnatQ -O2 -gnatn -gnatp -gnatA -j${PROCESSORS}
DYNAMIC_FLAGS=	-fPIC ${STATIC_FLAGS}

STATIC_FLAVOR=		static static-pic
FLAGS_static=		${STATIC_FLAGS}
FLAGS_static-pic=	${DYNAMIC_FLAGS}

schema_libs: schema/lib/static/libxmlada_schema.a
schema_libs: schema/lib/static-pic/libxmlada_schema.a
schema_libs: distrib/xmlada_unicode.gpr
schema_libs: distrib/xmlada_input_sources.gpr
schema_libs: distrib/xmlada_sax.gpr
schema_libs: distrib/xmlada_dom.gpr
schema_libs: distrib/xmlada_schema.gpr

.if "${OPSYS}" == "Darwin"
schema_libs: schema/lib/relocatable/libxmlada_schema.dylib
.else
schema_libs: schema/lib/relocatable/libxmlada_schema.so
.endif

#
# unicode depends on nothing
#

.for FLAV in ${STATIC_FLAVOR}
unicode/lib/${FLAV}/libxmlada_unicode.a: unicode/dummy_unicode.adb
	@echo building ${FLAV} ${.TARGET:R} library
	@mkdir -p unicode/obj/${FLAV} unicode/lib/${FLAV}
	@rm -f ${.TARGET}
	gnatmake -c ${.ALLSRC} -D unicode/obj/${FLAV} ${FLAGS_${FLAV}}
	rm unicode/obj/${FLAV}/dummy*
	ar cq ${.TARGET} unicode/obj/${FLAV}/*.o
	ranlib ${.TARGET}
.endfor

unicode/lib/relocatable/libxmlada_unicode.so: unicode/dummy_unicode.adb
	@echo building shared library ${.TARGET:R}
	@mkdir -p unicode/obj/relocatable unicode/lib/relocatable
	@rm -f ${.TARGET} ${.TARGET}.${LIBVER}
	gnatmake -c ${.ALLSRC} -D unicode/obj/relocatable ${DYNAMIC_FLAGS}
	rm unicode/obj/relocatable/dummy*
	ada -shared -Wl,-rpath,${MYRPATH} -L${ADALIB} -lgnat \
	    -o ${.TARGET}.${LIBVER} -Wl,-soname,${.TARGET:T}.${LIBVER} \
	    unicode/obj/relocatable/*.o
	ln -s ${.TARGET:T}.${LIBVER} ${.TARGET}

unicode/lib/relocatable/libxmlada_unicode.${LIBVER}.dylib: unicode/dummy_unicode.adb
	@echo building shared library ${.TARGET:R}
	@mkdir -p unicode/obj/relocatable ${.TARGET:H}
	@rm -f ${.TARGET}
	gnatmake -c ${.ALLSRC} -D unicode/obj/relocatable ${DYNAMIC_FLAGS}
	rm -f unicode/obj/relocatable/dummy*
	ada -dynamiclib -Wl,-rpath,${MYRPATH} -L${ADALIB} -lgnat \
		-o ${.TARGET} -install_name ${PREFIX}/${.TARGET} \
		unicode/obj/relocatable/*.o

unicode/lib/relocatable/libxmlada_unicode.dylib: ${.TARGET:H}/libxmlada_unicode.${LIBVER}.dylib
	ln -sf ${.ALLSRC:T} ${.TARGET}

#
# input sources depends on unicode
#

.for FLAV in ${STATIC_FLAVOR}
input_sources/lib/${FLAV}/libxmlada_input_sources.a: input_sources/dummy_input_sources.adb unicode/lib/${FLAV}/libxmlada_unicode.a
	@echo building ${FLAV} ${.TARGET:R} library
	@mkdir -p input_sources/obj/${FLAV} input_sources/lib/${FLAV}
	@rm -f ${.TARGET}
	gnatmake -c ${.ALLSRC:M*.adb} -D input_sources/obj/${FLAV} -aOunicode/obj/${FLAV} -aIunicode ${FLAGS_${FLAV}}
	rm input_sources/obj/${FLAV}/dummy*
	ar cq ${.TARGET} input_sources/obj/${FLAV}/*.o
	ranlib ${.TARGET}
.endfor

input_sources/lib/relocatable/libxmlada_input_sources.so: input_sources/dummy_input_sources.adb unicode/lib/relocatable/libxmlada_unicode.so
	@echo building shared library ${.TARGET:R}
	@mkdir -p input_sources/obj/relocatable input_sources/lib/relocatable
	@rm -f ${.TARGET} ${.TARGET}.${LIBVER}
	gnatmake -c ${.ALLSRC:M*.adb} -D input_sources/obj/relocatable -aOunicode/obj/relocatable -aIunicode ${DYNAMIC_FLAGS}
	rm input_sources/obj/relocatable/dummy*
	ada -shared -Wl,-rpath,${MYRPATH} -L${ADALIB} -lgnat \
	    -Lunicode/lib/relocatable -lxmlada_unicode \
	    -o ${.TARGET}.${LIBVER} -Wl,-soname,${.TARGET:T}.${LIBVER} \
	    input_sources/obj/relocatable/*.o
	ln -s ${.TARGET:T}.${LIBVER} ${.TARGET}

input_sources/lib/relocatable/libxmlada_input_sources.${LIBVER}.dylib: input_sources/dummy_input_sources.adb
	@echo building shared library ${.TARGET:R}
	@mkdir -p input_sources/obj/relocatable ${.TARGET:H}
	@rm -f ${.TARGET}
	gnatmake -c ${.ALLSRC:M*.adb} -D input_sources/obj/relocatable -aOunicode/obj/relocatable -aIunicode ${DYNAMIC_FLAGS}
	rm -f input_sources/obj/relocatable/dummy*
	ada -dynamiclib -Wl,-rpath,${MYRPATH} -L${ADALIB} -lgnat \
		-Lunicode/lib/relocatable -lxmlada_unicode \
		-o ${.TARGET} -install_name ${PREFIX}/${.TARGET} \
		input_sources/obj/relocatable/*.o

input_sources/lib/relocatable/libxmlada_input_sources.dylib: \
	unicode/lib/relocatable/libxmlada_unicode.dylib \
	input_sources/lib/relocatable/libxmlada_input_sources.${LIBVER}.dylib
	ln -sf libxmlada_input_sources.${LIBVER}.dylib ${.TARGET}

#
# sax depends on input sources and unicode (sufficent to limit to I.S)
#

.for FLAV in ${STATIC_FLAVOR}
sax/lib/${FLAV}/libxmlada_sax.a: sax/dummy_sax.adb input_sources/lib/${FLAV}/libxmlada_input_sources.a
	@echo building ${FLAV} ${.TARGET:R} library
	@mkdir -p sax/obj/${FLAV} sax/lib/${FLAV}
	@rm -f ${.TARGET}
	gnatmake -c ${.ALLSRC:M*.adb} -D sax/obj/${FLAV} -aOunicode/obj/${FLAV} -aOinput_sources/obj/${FLAV} -aIunicode -aIinput_sources ${FLAGS_${FLAV}}
	rm sax/obj/${FLAV}/dummy*
	ar cq ${.TARGET} sax/obj/${FLAV}/*.o
	ranlib ${.TARGET}
.endfor

sax/lib/relocatable/libxmlada_sax.so: sax/dummy_sax.adb input_sources/lib/relocatable/libxmlada_input_sources.so
	@echo building shared library ${.TARGET:R}
	@mkdir -p sax/obj/relocatable sax/lib/relocatable
	@rm -f ${.TARGET} ${.TARGET}.${LIBVER}
	gnatmake -c ${.ALLSRC:M*.adb} -D sax/obj/relocatable -aOunicode/obj/relocatable -aOinput_sources/obj/relocatable -aIunicode -aIinput_sources ${DYNAMIC_FLAGS}
	rm sax/obj/relocatable/dummy*
	ada -shared -Wl,-rpath,${MYRPATH} -L${ADALIB} -lgnat \
	    -Lunicode/lib/relocatable -lxmlada_unicode \
	    -Linput_sources/lib/relocatable -lxmlada_input_sources \
	    -o ${.TARGET}.${LIBVER} -Wl,-soname,${.TARGET:T}.${LIBVER} \
	    sax/obj/relocatable/*.o
	ln -s ${.TARGET:T}.${LIBVER} ${.TARGET}

sax/lib/relocatable/libxmlada_sax.${LIBVER}.dylib: sax/dummy_sax.adb
	@echo building shared library ${.TARGET:R}
	@mkdir -p sax/obj/relocatable ${.TARGET:H}
	@rm -f ${.TARGET}
	gnatmake -c ${.ALLSRC:M*.adb} -D sax/obj/relocatable -aOunicode/obj/relocatable -aOinput_sources/obj/relocatable -aIunicode -aIinput_sources ${DYNAMIC_FLAGS}
	rm -f sax/obj/relocatable/dummy*
	ada -dynamiclib -Wl,-rpath,${MYRPATH} -L${ADALIB} -lgnat \
		-Lunicode/lib/relocatable -lxmlada_unicode \
		-Linput_sources/lib/relocatable -lxmlada_input_sources \
		-o ${.TARGET} -install_name ${PREFIX}/${.TARGET} \
		sax/obj/relocatable/*.o

sax/lib/relocatable/libxmlada_sax.dylib: \
	input_sources/lib/relocatable/libxmlada_input_sources.dylib \
	sax/lib/relocatable/libxmlada_sax.${LIBVER}.dylib
	ln -sf libxmlada_sax.${LIBVER}.dylib ${.TARGET}

#
# dom depends on three other libraries (sufficent to limit to sax)
#

.for FLAV in ${STATIC_FLAVOR}
dom/lib/${FLAV}/libxmlada_dom.a: dom/dummy_dom.adb sax/lib/${FLAV}/libxmlada_sax.a
	@echo building ${FLAV} ${.TARGET:R} library
	@mkdir -p dom/obj/${FLAV} dom/lib/${FLAV}
	@rm -f ${.TARGET}
	gnatmake -c ${.ALLSRC:M*.adb} -D dom/obj/${FLAV} -aOunicode/obj/${FLAV} -aOinput_sources/obj/${FLAV} -aOsax/obj/${FLAV} -aIunicode -aIinput_sources -aIsax ${FLAGS_${FLAV}}
	rm dom/obj/${FLAV}/dummy*
	ar cq ${.TARGET} dom/obj/${FLAV}/*.o
	ranlib ${.TARGET}
.endfor

dom/lib/relocatable/libxmlada_dom.so: dom/dummy_dom.adb sax/lib/relocatable/libxmlada_sax.so
	@echo building shared library ${.TARGET:R}
	@mkdir -p dom/obj/relocatable dom/lib/relocatable
	@rm -f ${.TARGET} ${.TARGET}.${LIBVER}
	gnatmake -c ${.ALLSRC:M*.adb} -D dom/obj/relocatable -aOunicode/obj/relocatable -aOinput_sources/obj/relocatable -aOsax/obj/relocatable -aIunicode -aIinput_sources -aIsax ${DYNAMIC_FLAGS}
	rm dom/obj/relocatable/dummy*
	ada -shared -Wl,-rpath,${MYRPATH} -L${ADALIB} -lgnat \
	    -Lunicode/lib/relocatable -lxmlada_unicode \
	    -Linput_sources/lib/relocatable -lxmlada_input_sources \
	    -Lsax/lib/relocatable -lxmlada_sax \
	    -o ${.TARGET}.${LIBVER} -Wl,-soname,${.TARGET:T}.${LIBVER} \
	    dom/obj/relocatable/*.o
	ln -s ${.TARGET:T}.${LIBVER} ${.TARGET}

dom/lib/relocatable/libxmlada_dom.${LIBVER}.dylib: dom/dummy_dom.adb
	@echo building shared library ${.TARGET:R}
	@mkdir -p dom/obj/relocatable ${.TARGET:H}
	@rm -f ${.TARGET}
	gnatmake -c ${.ALLSRC:M*.adb} -D dom/obj/relocatable -aOunicode/obj/relocatable -aOinput_sources/obj/relocatable -aOsax/obj/relocatable -aIunicode -aIinput_sources -aIsax ${DYNAMIC_FLAGS}
	rm -f dom/obj/relocatable/dummy*
	ada -dynamiclib -Wl,-rpath,${MYRPATH} -L${ADALIB} -lgnat \
		-Lunicode/lib/relocatable -lxmlada_unicode \
		-Linput_sources/lib/relocatable -lxmlada_input_sources \
		-Lsax/lib/relocatable -lxmlada_sax \
		-o ${.TARGET} -install_name ${PREFIX}/${.TARGET} \
		dom/obj/relocatable/*.o

dom/lib/relocatable/libxmlada_dom.dylib: \
	sax/lib/relocatable/libxmlada_sax.dylib \
	dom/lib/relocatable/libxmlada_dom.${LIBVER}.dylib
	ln -sf libxmlada_dom.${LIBVER}.dylib ${.TARGET}

#
# schema depends on four other libraries (sufficent to limit to dom)
#

.for FLAV in ${STATIC_FLAVOR}
schema/lib/${FLAV}/libxmlada_schema.a: schema/dummy_schema.adb dom/lib/${FLAV}/libxmlada_dom.a
	@echo building ${FLAV} ${.TARGET:R} library
	@mkdir -p schema/obj/${FLAV} schema/lib/${FLAV}
	@rm -f ${.TARGET}
	gnatmake -c ${.ALLSRC:M*.adb} -D schema/obj/${FLAV} -aOunicode/obj/${FLAV} -aOinput_sources/obj/${FLAV} -aOsax/obj/${FLAV} -aOdom/obj/${FLAV} -aIunicode -aIinput_sources -aIsax -aIdom ${FLAGS_${FLAV}}
	rm schema/obj/${FLAV}/dummy*
	ar cq ${.TARGET} schema/obj/${FLAV}/*.o
	ranlib ${.TARGET}
.endfor

schema/lib/relocatable/libxmlada_schema.so: schema/dummy_schema.adb dom/lib/relocatable/libxmlada_dom.so
	@echo building shared library ${.TARGET:R}
	@mkdir -p schema/obj/relocatable schema/lib/relocatable
	@rm -f ${.TARGET} ${.TARGET}.${LIBVER}
	gnatmake -c ${.ALLSRC:M*.adb} -D schema/obj/relocatable -aOunicode/obj/relocatable -aOinput_sources/obj/relocatable -aOsax/obj/relocatable -aOdom/obj/relocatable -aIunicode -aIinput_sources -aIsax -aIdom ${DYNAMIC_FLAGS}
	rm schema/obj/relocatable/dummy*
	ada -shared -Wl,-rpath,${MYRPATH} -L${ADALIB} -lgnat \
	    -Lunicode/lib/relocatable -lxmlada_unicode \
	    -Linput_sources/lib/relocatable -lxmlada_input_sources \
	    -Lsax/lib/relocatable -lxmlada_sax \
	    -Ldom/lib/relocatable -lxmlada_dom \
	    -o ${.TARGET}.${LIBVER} -Wl,-soname,${.TARGET:T}.${LIBVER} \
	    schema/obj/relocatable/*.o
	ln -s ${.TARGET:T}.${LIBVER} ${.TARGET}

schema/lib/relocatable/libxmlada_schema.${LIBVER}.dylib: schema/dummy_schema.adb
	@echo building shared library ${.TARGET:R}
	@mkdir -p schema/obj/relocatable ${.TARGET:H}
	@rm -f ${.TARGET}
	gnatmake -c ${.ALLSRC:M*.adb} -D schema/obj/relocatable -aOunicode/obj/relocatable -aOinput_sources/obj/relocatable -aOsax/obj/relocatable -aOdom/obj/relocatable -aIunicode -aIinput_sources -aIsax -aIdom ${DYNAMIC_FLAGS}
	rm -f schema/obj/relocatable/dummy*
	ada -dynamiclib -Wl,-rpath,${MYRPATH} -L${ADALIB} -lgnat \
		-Lunicode/lib/relocatable -lxmlada_unicode \
		-Linput_sources/lib/relocatable -lxmlada_input_sources \
		-Lsax/lib/relocatable -lxmlada_sax \
		-Ldom/lib/relocatable -lxmlada_dom \
		-o ${.TARGET} -install_name ${PREFIX}/${.TARGET} \
		schema/obj/relocatable/*.o

schema/lib/relocatable/libxmlada_schema.dylib: \
	dom/lib/relocatable/libxmlada_dom.dylib \
	schema/lib/relocatable/libxmlada_schema.${LIBVER}.dylib
	ln -sf libxmlada_schema.${LIBVER}.dylib ${.TARGET}

#
# Sphinx documentation
#

gen-docs:
	${MAKE} -e -C docs html

unicode/dummy_unicode.adb:
	@grep ^package unicode/unicode-*.ads | \
		awk '{print "with " $$2 ";"}' | sort > ${.TARGET}
	@echo 'procedure dummy_unicode is' >> ${.TARGET}
	@echo 'begin' >> ${.TARGET}
	@echo '   null;' >> ${.TARGET}
	@echo 'end dummy_unicode;' >> ${.TARGET}

input_sources/dummy_input_sources.adb:
	@grep ^package input_sources/input_sources-*.ads | \
		awk '{print "with " $$2 ";"}' | sort > ${.TARGET}
	@echo 'procedure dummy_input_sources is' >> ${.TARGET}
	@echo 'begin' >> ${.TARGET}
	@echo '   null;' >> ${.TARGET}
	@echo 'end dummy_input_sources;' >> ${.TARGET}

sax/dummy_sax.adb:
	@grep ^package sax/sax-*.ads | \
		awk '{print "with " $$2 ";"}' | sort > ${.TARGET}
	@echo 'procedure dummy_sax is' >> ${.TARGET}
	@echo 'begin' >> ${.TARGET}
	@echo '   null;' >> ${.TARGET}
	@echo 'end dummy_sax;' >> ${.TARGET}

dom/dummy_dom.adb:
	@grep ^package dom/dom-*.ads | \
		awk '{print "with " $$2 ";"}' | sort > ${.TARGET}
	@echo 'procedure dummy_dom is' >> ${.TARGET}
	@echo 'begin' >> ${.TARGET}
	@echo '   null;' >> ${.TARGET}
	@echo 'end dummy_dom;' >> ${.TARGET}

schema/dummy_schema.adb:
	@grep ^package schema/schema-*.ads | \
		awk '{print "with " $$2 ";"}' | sort > ${.TARGET}
	@echo 'procedure dummy_schema is' >> ${.TARGET}
	@echo 'begin' >> ${.TARGET}
	@echo '   null;' >> ${.TARGET}
	@echo 'end dummy_schema;' >> ${.TARGET}

FIND1=	cd unicode && find * \( -name "unicode*.ad[bs]" \
	-a ! -name "unicode.ads" \) -exec printf ', "%s"' {} \; | sort
FIND2=	cd input_sources && find * \( -name "input*.ad[bs]" \
	-a ! -name "input_sources.ads" \) -exec printf ', "%s"' {} \; | sort
FIND3=	cd sax && \
	find * -name "sax-*.ad[bs]" -exec printf ', "%s"' {} \; | sort
FIND4=	cd dom && \
	find * -name "dom-*.ad[bs]" -exec printf ', "%s"' {} \; | sort
FIND5=	cd schema && find * -depth -maxdepth 0 \
	\( -name "schema*.ad[bs]" -a ! -name "schema.ads" \) \
	-exec printf ', "%s"' {} \; | sort

distrib/xmlada_unicode.gpr: generic_gpr.in
	@sed    -e '/^with/d' \
		-e 's|@ZONE@|unicode|' \
		-e "s|@FILES@|`${FIND1}`|" \
		-e "s|@RPATH@|${MYRPATH}|" \
		-e 's|@VERSION@|${LIBVER}|' ${.ALLSRC} > ${.TARGET}

distrib/xmlada_input_sources.gpr: generic_gpr.in
	@sed    -e 's|@DEPENDS@|unicode|' \
		-e 's|@ZONE@|input_sources|' \
		-e "s|@FILES@|`${FIND2}`|" \
		-e "s|@RPATH@|${MYRPATH}|" \
		-e 's|@VERSION@|${LIBVER}|' ${.ALLSRC} > ${.TARGET}

distrib/xmlada_sax.gpr: generic_gpr.in
	@sed    -e 's|@DEPENDS@|input_sources|' \
		-e 's|@ZONE@|sax|' \
		-e "s|@FILES@|`${FIND3}`|" \
		-e "s|@RPATH@|${MYRPATH}|" \
		-e 's|@VERSION@|${LIBVER}|' ${.ALLSRC} > ${.TARGET} 

distrib/xmlada_dom.gpr: generic_gpr.in
	@sed    -e 's|@DEPENDS@|sax|' \
		-e 's|@ZONE@|dom|' \
		-e "s|@FILES@|`${FIND4}`|" \
		-e "s|@RPATH@|${MYRPATH}|" \
		-e 's|@VERSION@|${LIBVER}|' ${.ALLSRC} > ${.TARGET}

distrib/xmlada_schema.gpr: generic_gpr.in
	@sed    -e 's|@DEPENDS@|dom|' \
		-e 's|@ZONE@|schema|' \
		-e "s|@FILES@|`${FIND5}`|" \
		-e "s|@RPATH@|${MYRPATH}|" \
		-e 's|@VERSION@|${LIBVER}|' ${.ALLSRC} > ${.TARGET}

install:
	@mkdir -p ${DESTDIR}${PREFIX}/include/xmlada \
		${DESTDIR}${PREFIX}/lib/gnat \
		${DESTDIR}${PREFIX}/lib/xmlada/relocatable \
		${DESTDIR}${PREFIX}/lib/xmlada/static-pic \
		${DESTDIR}${PREFIX}/lib/xmlada/static \
		${DESTDIR}${STD_DOCDIR}

	${BSD_INSTALL_DATA} dom/*.ad[bs] input_sources/*.ad[bs] \
		sax/*.ad[bs] schema/*.ad[bs] unicode/*.ad[bs] \
		${DESTDIR}${PREFIX}/include/xmlada

	rm ${DESTDIR}${PREFIX}/include/xmlada/dummy_*.adb

	${BSD_INSTALL_DATA} dom/obj/relocatable/*.ali \
		input_sources/obj/relocatable/*.ali \
		sax/obj/relocatable/*.ali \
		schema/obj/relocatable/*.ali \
		unicode/obj/relocatable/*.ali \
		${DESTDIR}${PREFIX}/lib/xmlada/relocatable

	${BSD_INSTALL_LIB} dom/lib/relocatable/* \
		input_sources/lib/relocatable/* \
		sax/lib/relocatable/* \
		schema/lib/relocatable/* \
		unicode/lib/relocatable/* \
		${DESTDIR}${PREFIX}/lib/xmlada/relocatable

.for FLAV in ${STATIC_FLAVOR}
	${BSD_INSTALL_DATA} dom/obj/${FLAV}/*.ali \
		input_sources/obj/${FLAV}/*.ali \
		sax/obj/${FLAV}/*.ali \
		schema/obj/${FLAV}/*.ali \
		unicode/obj/${FLAV}/*.ali \
		dom/lib/${FLAV}/* \
		input_sources/lib/${FLAV}/* \
		sax/lib/${FLAV}/* \
		schema/lib/${FLAV}/* \
		unicode/lib/${FLAV}/* \
		${DESTDIR}${PREFIX}/lib/xmlada/${FLAV}
.endfor

	${BSD_INSTALL_DATA} distrib/xml*.gpr ${DESTDIR}${PREFIX}/lib/gnat

	cp -a docs/_build/html ${DESTDIR}${STD_DOCDIR}
	rm -rf ${DESTDIR}${STD_DOCDIR}/html/_sources
	rm -rf ${DESTDIR}${STD_DOCDIR}/html/.buildinfo
